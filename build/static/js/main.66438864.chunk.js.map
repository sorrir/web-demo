{"version":3,"sources":["components/Component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","card","margin","spacing","minWidth","bullet","display","transform","title","fontSize","pos","marginBottom","formControl","StateMachineStateComp","props","JSON","stringify","s","state","fsm","my","EventComp","className","events","map","e","port","type","Button","size","onClick","dequeue","ComponentComp","useState","portToSendEvent","setPortToSendEvent","eventToSend","setEventToSend","classes","Card","CardContent","c","name","undefined","c_state","FormControl","InputLabel","id","Select","labelId","value","onChange","event","target","MenuItem","ports","p","Object","keys","eventTypes","toString","enqueue","content","flexGrow","height","overflow","grow","inputColor","color","App","useEffect","script","document","createElement","src","async","body","appendChild","removeChild","configuration","components","barrier","DSB","sensor","user","connections","createConnection","SensorPorts","TO_DSB","DSB_Ports","FROM_SENSOR","TO_BARRIER","BarrierPorts","FROM_DSB","TO_USER","UserPorts","FROM_USER","startState","componentState","Map","barrier_state","sensor_startstate","DSB_state","user_startstate","_","configurationState","setConfigurationState","svg","setSVG","spaceSize","setSpaceSize","enqueueEvent","component","newConfigurationState","comp_state","get","push","deleteEvent","deleteEvent_internalcomponent","compToEventTypeMap","set","BarrierEventTypes","DSBEventTypes","SensorEventTypes","UserEventTypes","CssBaseline","AppBar","position","Toolbar","Typography","variant","configurationStep","noValidate","autoComplete","TextField","InputProps","InputLabelProps","label","defaultValue","data","depGraphToDot","stateSpace","allConfigurationSteps","Viz","Grid","container","justify","item","Container","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66438864.chunk.js","sourcesContent":["import Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport React, {useState} from 'react';\r\nimport {AbstractState, Component, Event, StateMachineState, Port} from 'sorrir-framework';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        card: {\r\n            margin: theme.spacing(2),\r\n            minWidth: 275,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(1),\r\n            minWidth: 120,\r\n        },\r\n    })\r\n);\r\n\r\nconst StateMachineStateComp: React.FC<{ s: StateMachineState<any, any, any, any> }> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <p>Discrete State: {JSON.stringify(props.s.state.fsm)}</p>\r\n            <p>Complex State: {JSON.stringify(props.s.state.my)}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction isStateMachineState(state: AbstractState<any, any, any> | StateMachineState<any, any, any, any> | undefined): state is StateMachineState<any, any, any, any> {\r\n    return (state as StateMachineState<any, any, any, any>).state.fsm !== undefined;\r\n}\r\n\r\ninterface EventCompProps {\r\n    events: Event<any, any>[] | undefined,\r\n    dequeue: (event: Event<any, any>) => void,\r\n}\r\n\r\nconst EventComp: React.FC<EventCompProps> = (props) => {\r\n    return (\r\n        <div className=\"Component-EventBox\">\r\n            <div>\r\n                Events:\r\n            </div>\r\n            <div className=\"Component-EventList\">\r\n                {props.events && props.events.map(e => {\r\n                    return (\r\n                        <div>\r\n                            {e.port}.{e.type}\r\n                            <Button size=\"small\" onClick={() => props.dequeue(e)}>\r\n                                <DeleteIcon/>\r\n                            </Button>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport interface ComponentCompProps {\r\n    c: Component<any, any>,\r\n    c_state: AbstractState<any, any, any> | undefined,\r\n    eventTypes: { [key: string]: any },\r\n    enqueue: (component: Component<any, any>, event: Event<any, any>) => void,\r\n    dequeue: (event: Event<any, any>) => void\r\n}\r\n\r\nexport const ComponentComp: React.FC<ComponentCompProps> = (props) => {\r\n\r\n    const [portToSendEvent, setPortToSendEvent] = useState(\"\");\r\n    const [eventToSend, setEventToSend] = useState(\"\");\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                Component: {props.c.name}\r\n                {\r\n                    (isStateMachineState(props.c_state)) ? (<StateMachineStateComp\r\n                        s={props.c_state}></StateMachineStateComp>) : JSON.stringify(props.c_state)\r\n                }\r\n                <EventComp events={props.c_state?.events} dequeue={props.dequeue}/>\r\n                <div className=\"Component-EventEnqueue\">\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"port-select-label\">Port:</InputLabel>\r\n                        <Select\r\n                            labelId=\"port-select-label\"\r\n                            id=\"port-select\"\r\n                            value={portToSendEvent}\r\n                            onChange={(event: React.ChangeEvent<{ value: unknown }>) => {\r\n                                setPortToSendEvent(event.target.value as string)\r\n                            }}\r\n                        >\r\n                            <MenuItem value={undefined}>\r\n                                <em>Internal</em>\r\n                            </MenuItem>\r\n                            {props.c.ports.map((p: Port<any, any>) => {\r\n                                return (\r\n                                    <MenuItem value={p.name}>{p.name}</MenuItem>\r\n                                )\r\n                            })}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"event-select-label\">Event:</InputLabel>\r\n                        <Select\r\n                            labelId=\"event-select-label\"\r\n                            id=\"event-select\"\r\n                            value={eventToSend}\r\n                            onChange={(event: React.ChangeEvent<{ value: unknown }>) => setEventToSend(event.target.value as string)}\r\n                        >\r\n                            {\r\n                                Object.keys(props.eventTypes).map(e => {\r\n                                    return (\r\n                                        <MenuItem value={e.toString()}>{e.toString()}</MenuItem>\r\n                                    )\r\n                                })}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <Button size=\"small\" onClick={() =>\r\n                        props.enqueue(props.c, {\r\n                            type: props.eventTypes[eventToSend],\r\n                            port: portToSendEvent\r\n                        } as Event<any, any>)\r\n                    }><AddBoxIcon/></Button>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}","import AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport * as _ from 'lodash';\r\nimport React, {useState, useEffect} from 'react';\r\nimport {\r\n    barrier,\r\n    BarrierEventTypes,\r\n    BarrierPorts,\r\n    barrier_state,\r\n    Component,\r\n    Configuration,\r\n    configurationStep,\r\n    createConnection,\r\n    DSB,\r\n    DSBEventTypes,\r\n    DSB_Ports,\r\n    DSB_state,\r\n    Event,\r\n    sensor,\r\n    SensorEventTypes,\r\n    SensorPorts,\r\n    sensor_startstate,\r\n    stateSpace,\r\n    allConfigurationSteps,\r\n    depGraphToDot,\r\n    user,\r\n    user_startstate,\r\n    UserPorts,\r\n    UserEventTypes\r\n} from \"sorrir-framework\";\r\nimport './App.css';\r\nimport {ComponentComp} from \"./components/Component\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport {Grid, CssBaseline, Container} from \"@material-ui/core\";\r\n\r\n\r\ndeclare var Viz: any;\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        content: {\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto'\r\n        },\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n        inputColor: {\r\n            color: '#E2E2E2'\r\n        }\r\n    }),\r\n);\r\n\r\nconst App: React.FC = () => {\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n\r\n        script.src = \"http://webgraphviz.com//viz.js\";\r\n        script.async = true;\r\n\r\n        document.body.appendChild(script);\r\n\r\n        return () => {\r\n            document.body.removeChild(script);\r\n        }\r\n    }, []);\r\n\r\n    const configuration: Configuration = {\r\n        components: [barrier, DSB, sensor, user],\r\n        connections: [\r\n            createConnection(sensor, SensorPorts.TO_DSB, DSB, DSB_Ports.FROM_SENSOR),\r\n            createConnection(DSB, DSB_Ports.TO_BARRIER, barrier, BarrierPorts.FROM_DSB),\r\n            createConnection(DSB, DSB_Ports.TO_USER, user, UserPorts.FROM_DSB),\r\n            createConnection(user, UserPorts.TO_DSB, DSB, DSB_Ports.FROM_USER),\r\n        ]\r\n    }\r\n\r\n    let startState = {\r\n        componentState: new Map([\r\n            [barrier, barrier_state] as [any, any],\r\n            [sensor, sensor_startstate] as [any, any],\r\n            [DSB, DSB_state] as [any, any],\r\n            [user, user_startstate] as [any, any],\r\n        ]),\r\n    }\r\n\r\n\r\n    const [configurationState, setConfigurationState] = useState(_.cloneDeep(startState));\r\n    const [svg, setSVG] = useState(\"\");\r\n    const [spaceSize, setSpaceSize] = useState(10);\r\n\r\n    function createStateSpace() {\r\n        var data = depGraphToDot(stateSpace(configuration, configurationState, allConfigurationSteps, spaceSize));\r\n        // Generate the Visualization of the Graph into \"svg\".\r\n        var svg = Viz(data, \"svg\");\r\n        setSVG(svg);\r\n    }\r\n\r\n    function reset() {\r\n        setConfigurationState(_.cloneDeep(startState));\r\n        setSVG(\"\");\r\n    }\r\n\r\n    function enqueueEvent(component: Component<BarrierEventTypes, BarrierPorts> | Component<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports> | Component<UserEventTypes, UserPorts>, event: Event<BarrierEventTypes, BarrierPorts> & Event<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports> & Event<UserEventTypes, UserPorts>) {\r\n        let newConfigurationState = {...configurationState};\r\n\r\n        const comp_state = newConfigurationState.componentState.get(component);\r\n        if (comp_state !== undefined) {\r\n            comp_state.events.push(event);\r\n        }\r\n\r\n        setConfigurationState(newConfigurationState);\r\n    };\r\n\r\n    function deleteEvent_internalcomponent(component: Component<BarrierEventTypes, BarrierPorts> | Component<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports> | Component<UserEventTypes, UserPorts>, event: Event<UserEventTypes, UserPorts> & Event<BarrierEventTypes, BarrierPorts> & Event<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports> & Event<UserEventTypes, UserPorts>) {\r\n        let newConfigurationState = {...configurationState};\r\n\r\n        const comp_state = newConfigurationState.componentState.get(component);\r\n        if (comp_state !== undefined) {\r\n            _.pull(comp_state.events, event);\r\n        }\r\n\r\n        setConfigurationState(newConfigurationState);\r\n    }\r\n\r\n    const deleteEvent = (component: Component<UserEventTypes, UserPorts> | Component<BarrierEventTypes, BarrierPorts> | Component<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports>) => (event: Event<UserEventTypes, UserPorts> & Event<BarrierEventTypes, BarrierPorts> & Event<BarrierEventTypes | SensorEventTypes | DSBEventTypes | UserEventTypes, DSB_Ports>) => deleteEvent_internalcomponent(component, event);\r\n\r\n    const compToEventTypeMap = new Map<Component<any, any>, object>();\r\n    compToEventTypeMap.set(barrier, BarrierEventTypes);\r\n    compToEventTypeMap.set(DSB, DSBEventTypes);\r\n    compToEventTypeMap.set(sensor, SensorEventTypes);\r\n    compToEventTypeMap.set(user, UserEventTypes);\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <CssBaseline/>\r\n\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\">\r\n                        SORRIR Demo\r\n                    </Typography>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    <Button color=\"inherit\" onClick={() => {\r\n                        setConfigurationState(configurationStep(configuration, configurationState));\r\n                    }\r\n                    }>\r\n                        Step\r\n                    </Button>\r\n                    <Button color=\"inherit\" onClick={reset}>Reset</Button>\r\n\r\n                    <div className={classes.grow}/>\r\n\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <TextField InputProps={{className: classes.inputColor}} InputLabelProps={{className: classes.inputColor}} id=\"outlined-basic\" label=\"Size\" type=\"number\" variant=\"outlined\" size=\"small\"\r\n                                   defaultValue={spaceSize} onChange={(e) => setSpaceSize(+e.target.value)}/>\r\n                    </form>\r\n                    <Button color=\"inherit\" onClick={createStateSpace}>\r\n                        StateSpace\r\n                    </Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Toolbar/>\r\n\r\n            <main className={classes.content}>\r\n                <Grid container justify=\"center\" spacing={3}>\r\n                    {configuration.components.map(c => {\r\n                        return (\r\n                            <Grid item>\r\n                                <ComponentComp c={c} c_state={configurationState.componentState.get(c)}\r\n                                               eventTypes={compToEventTypeMap.get(c) || {}} enqueue={enqueueEvent}\r\n                                               dequeue={deleteEvent(c)}>\r\n\r\n                                </ComponentComp>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n\r\n                <Container>\r\n                    <div id=\"statespace\" dangerouslySetInnerHTML={{__html: svg}}>\r\n                    </div>\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}